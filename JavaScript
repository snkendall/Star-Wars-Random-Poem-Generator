

var corpus = "A long time ago, in a galaxy far far away... It is a period of civil war. Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire. During the battle, Rebel spies managed to steal secret plans to the Empire's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet. Pursued by the Empire's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy.... It is a dark time for the Rebellion. Although the Death Star has been destroyed, Imperial troops have driven the Rebel forces from their hidden base and pursued them across the galaxy. Evading the dreaded Imperial Starfleet, a group of freedom fighters led by Luke Skywalker has established a new secret base on the remote ice world of Hoth. The evil lord Darth Vader, obsessed with finding young Skywalker, has dispatched thousands of remote probes into the far reaches of space.... Luke Skywalker has returned to his home planet of Tatooine in an attempt to rescue his friend Han Solo from the clutches of the vile gangster Jabba the Hutt. Little does Luke know that the GALACTIC EMPIRE has secretly begun construction on a new armored space station even more powerful than the first dreaded Death Star. When completed, this ultimate weapon will spell certain doom for the small band of rebels struggling to restore freedom to the galaxy...";


function generatePoem(corpus, numLines, numWords){
  var prepositions = [ 'aboard', 'about','above', 'across', 'after', 'against', 'along', 'amid', 'among', 'around', 'as', 'at', 'before', 'behind', 'below', 'beneath', 'beside', 'besides', 'between', 'beyond', 'but', 'by', 'concerning', 'considering', 'despite', 'down', 'during', 'except', 'excluding', 'following', 'for', 'from', 'in', 'inside', 'into', 'like', 'near', 'of', 'off', 'on', 'onto', 'out', 'outside', 'over', 'past', 'pending', 'per', 'plus', 'regarding', 'save', 'saving', 'since', 'than', 'then', 'through', 'throughout', 'to', 'toward', 'towards', 'under', 'underneath', 'unlike', 'until', 'up', 'upon', 'versus', 'via', 'with', 'within', 'without'];
  
  var badEndings = prepositions.slice();
  badEndings.splice(0, 0, 'a', 'an', 'and', 'the', 'is', 'have', 'his', 'hers', 'their', 'has');
  
  //Makes an array out of every word in the corpus without punctuation or capitalization
  function corpusArray(str){
    var alphabet = 'abcdefghijklmnopqrstuvwxyz'; 
    var moldIntoArray = str.toLowerCase().split(' ').map(function(el){
      var finalWord = '';
      for (var i = 0; i < el.length; i++){
        if (alphabet.indexOf(el[i]) > -1){
          finalWord += el[i];
        }
      }
      return finalWord;
    });
    return moldIntoArray;
  }
  
  //an array of words that are good to pull random endings from (that was a bad word to end on)
  var goodWords = corpusArray(corpus).filter(function(cV){
    return badEndings.indexOf(cV) === -1;
  });
  
  //Makes an object where each key is a word from the text, and each value is and array (where each element is the two words following every occurence of the key word)
  function generateWordPairs(text){
    var objPairs = {};
    for (var i = 0; i < text.length - 2; i++){
      var keyName = objPairs[text[i]];
      //Checks to see if that key already exists, and adds it with the initial word pairing
      if (!keyName){
        objPairs[text[i]] = [text[i+1] + ' ' + text[i+2]];
      } else { //pushes more pairings onto the value array
        objPairs[text[i]].push(text[i+1] + ' ' + text[i+2]);
      }
    }
    return objPairs;
  }
  
  //Writes one line of the poem
  function writeLine(obj, n){
    var poetryLine = '';
  
  function wordToPoetryLine(obj){
    var endPair = '';
    //takes the passed obj and returns an array of its keys
    var arrayOfKeys = Object.keys(obj);
    // pulls a random key from that array
    var randomKey = arrayOfKeys[Math.floor(Math.random() * arrayOfKeys.length)];
    endPair += randomKey + ' ';
    // pulls the array in the object paired with that random key
    var randomArray = obj[randomKey];
    //pulls a random element (word) from the pulled array
    var randomWord = randomArray[Math.floor(Math.random() * randomArray.length)];
    endPair += randomWord;
    return endPair;
  }
   
  for (var i = 0; i < n; i++){
    var thisWord = wordToPoetryLine(obj);
    if (i !== n-1){
      poetryLine += thisWord + " ";
    } else {
      poetryLine += thisWord + "\n";
    }  
  }
    
  function betterGrammar(str){
    var arrStr = str.split(' ');
    for (var i = 0; i < arrStr.length; i++){
      if (arrStr.indexOf(arrStr[i]) !== i){
        arrStr[i] = wordToPoetryLine(obj);
      }
    }
    //if the last element is in badEndings
    if (badEndings.indexOf(arrStr[arrStr.length-1]) > -1){
      arrStr[arrStr.length-1] = goodWords[Math.floor(Math.random() * goodWords.length)];
    }
    return arrStr.join(' ');
  } 
  
  return betterGrammar(poetryLine);
}
  //PULLING IT ALL TOGETHER
  var poem = '';
  //step one: convert corpus into an array
  var stepOne = corpusArray(corpus);
  //step two: make an object of the word pairings
  var stepTwo = generateWordPairs(stepOne);
  //step three: make numlines of poetry, with numWords, seperated by line breaks
  for (var i = 0; i < numLines; i++){
    poem += writeLine(stepTwo, numWords);
  }
  return poem;
}

//generatePoem(corpus, 5, 2);

document.getElementById("poem").innerHTML = generatePoem(corpus, 7, 3);
